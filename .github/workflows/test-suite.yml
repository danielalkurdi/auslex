name: AusLex Test Suite

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Unit and Integration Tests
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint --if-present
      
    - name: Run type checking
      run: npx tsc --noEmit --if-present
      
    - name: Run unit tests with coverage
      run: npm run test:coverage
      env:
        CI: true
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        flags: unittests
        name: unit-test-coverage
        
    - name: Store test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-node${{ matrix.node-version }}
        path: |
          coverage/
          test-results/
          
  # Citation Parser Accuracy Tests
  citation-accuracy:
    name: Legal Citation Accuracy Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run citation parser accuracy tests
      run: npm test -- --testPathPattern=citationParser.test.js --coverage=false --watchAll=false
      env:
        CI: true
        
    - name: Validate Australian legal citation patterns
      run: |
        echo "Validating citation parsing accuracy..."
        npm test -- --testPathPattern=citationParser.test.js --verbose --watchAll=false
      env:
        CI: true
        
  # API Backend Tests  
  api-tests:
    name: API Backend Tests
    runs-on: ubuntu-latest
    
    services:
      # Add database service if needed for API testing
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: auslex_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install Python dependencies
      run: |
        pip install -r api/requirements.txt
        pip install pytest pytest-asyncio httpx
        
    - name: Run API tests
      run: |
        cd api
        python -m pytest tests/ -v --tb=short
      env:
        DATABASE_URL: postgresql://postgres:testpassword@localhost/auslex_test
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        
    - name: Test API security
      run: |
        cd api  
        python -m pytest tests/test_security.py -v
        
  # End-to-End Tests with Playwright
  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: [unit-tests, api-tests]
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install ${{ matrix.browser }} --with-deps
      
    - name: Setup Python for API backend
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python dependencies
      run: pip install -r api/requirements.txt
      
    - name: Start API backend
      run: |
        cd api
        python index.py &
        sleep 10  # Wait for API to start
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        
    - name: Build React app
      run: npm run build
      
    - name: Run E2E tests
      run: npx playwright test --project=${{ matrix.browser }}
      env:
        CI: true
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-results-${{ matrix.browser }}
        path: |
          test-results/
          playwright-report/
          
  # Mobile E2E Tests
  mobile-e2e:
    name: Mobile E2E Tests
    runs-on: ubuntu-latest
    needs: e2e-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Run mobile-specific tests
      run: npx playwright test --project=mobile-chrome --project=mobile-safari
      env:
        CI: true
        
    - name: Upload mobile test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mobile-e2e-results
        path: |
          test-results/
          playwright-report/
          
  # Security and Accessibility Testing
  security-accessibility:
    name: Security & Accessibility Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: |
        npm audit --audit-level=high
        npx audit-ci --config audit-ci.json
      continue-on-error: true
      
    - name: Install axe-core for accessibility testing
      run: npm install --save-dev @axe-core/playwright
      
    - name: Run accessibility tests
      run: npx playwright test accessibility.spec.js
      
    - name: OWASP ZAP security scan
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: 'http://localhost:3000'
        fail_action: false
        
  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, citation-accuracy, api-tests, e2e-tests, mobile-e2e, security-accessibility]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Generate test summary
      run: |
        echo "# AusLex Test Suite Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results Overview" >> $GITHUB_STEP_SUMMARY
        
        # Check if unit tests passed
        if [ "${{ needs.unit-tests.result }}" == "success" ]; then
          echo "‚úÖ Unit & Integration Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Unit & Integration Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check citation accuracy tests
        if [ "${{ needs.citation-accuracy.result }}" == "success" ]; then
          echo "‚úÖ Legal Citation Accuracy: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Legal Citation Accuracy: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check API tests
        if [ "${{ needs.api-tests.result }}" == "success" ]; then
          echo "‚úÖ API Backend Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå API Backend Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check E2E tests
        if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
          echo "‚úÖ End-to-End Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå End-to-End Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check mobile tests
        if [ "${{ needs.mobile-e2e.result }}" == "success" ]; then
          echo "‚úÖ Mobile E2E Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Mobile E2E Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Critical Legal Accuracy Status" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.citation-accuracy.result }}" == "success" ]; then
          echo "üèõÔ∏è **Legal Citation Parsing: ACCURATE** - Safe for legal professional use" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è **Legal Citation Parsing: ERRORS DETECTED** - Review required before deployment" >> $GITHUB_STEP_SUMMARY
        fi
        
  # Deployment Gate
  deployment-gate:
    name: Deployment Readiness Gate
    runs-on: ubuntu-latest
    needs: [unit-tests, citation-accuracy, api-tests, e2e-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Verify deployment readiness
      run: |
        echo "Checking deployment readiness..."
        
        # Critical tests must pass for deployment
        if [ "${{ needs.unit-tests.result }}" != "success" ] || \
           [ "${{ needs.citation-accuracy.result }}" != "success" ] || \
           [ "${{ needs.api-tests.result }}" != "success" ] || \
           [ "${{ needs.e2e-tests.result }}" != "success" ]; then
          echo "‚ùå DEPLOYMENT BLOCKED: Critical tests failed"
          echo "Legal AI platform requires all core tests to pass for safe deployment"
          exit 1
        fi
        
        echo "‚úÖ DEPLOYMENT APPROVED: All critical tests passed"
        echo "Platform is ready for legal professional use"